name: "Test and Deploy"
on:
  push:
jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: postgrespassword
        ports:
          - 5432:5432
    env:
      SCCACHE_DIR: /home/runner/.cache/sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_IDLE_TIMEOUT: 0
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v8
        with:
          name: cassiemeharry-ttsmagic
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Set up Nix environment
        run: nix-shell --run "echo 'ok'"
      - name: Install sccache
        shell: bash
        run: |
          cd /tmp
          wget 'https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz'
          tar xzf sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
          cd sccache-v0.2.15-x86_64-unknown-linux-musl
          chmod +x sccache
      - name: Cache Rust build data
        uses: actions/cache@v2
        with:
          path: |
            /home/runner/.cache/sccache
            /home/runner/.cargo/registry
            /home/runner/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Run tests
        run: nix-shell --run "cargo test"
        env:
          RUSTC_WRAPPER: /tmp/sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: postgres
          DB_USER: postgres
          DB_PASSWORD: postgrespassword
          REDIS_HOST: localhost
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_KEY_ID: ${{ secrets.S3_SECRET_KEY_ID }}
          SECRETS_TOML: .github/workflows/test-and-deploy_secrets.toml

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ tests ]
    environment: production
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v8
        with:
          name: cassiemeharry-ttsmagic
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build Docker image
        run: nix-build nix/docker-image.nix -o ttsmagic-docker-image.tar.gz
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          touch ~/.ssh/ttsmagic-deploy.key
          chmod 600 ~/.ssh/ttsmagic-deploy.key
          echo > ~/.ssh/ttsmagic-deploy.key "$SSH_KEY_CONTENTS"
          touch ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo >> ~/.ssh/known_hosts "$SSH_KNOWN_HOSTS"
        env:
          SSH_KEY_CONTENTS: ${{ secrets.DEPLOY_SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.DEPLOY_SSH_KNOWN_HOSTS }}
      - name: Upload Docker image to production host
        run: scp -i ~/.ssh/ttsmagic-deploy.key "ttsmagic-docker-image.tar.gz" root@"$DEPLOY_HOST":"/ttsmagic/ttsmagic-docker-image.tar.gz"
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      - name: Deploy production
        run: ssh -i ~/.ssh/ttsmagic-deploy.key root@"$DEPLOY_HOST" 'chef-solo -c ~/chef-solo/solo.rb -j ~/chef-solo/dna.json'
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
